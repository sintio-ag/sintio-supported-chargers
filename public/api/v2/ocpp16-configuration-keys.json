[
  {
    "name": "AllowOfflineTxForUnknownId",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "false",
    "unit": "",
    "description": "If this key exists, the Charge Point supports Unknown Offline Authorization. If this key reports a value of true, Unknown Offline Authorization is enabled.",
    "origin": "OCPP"
  },
  {
    "name": "AuthorizationCacheEnabled",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "false",
    "unit": "",
    "description": "If this key exists, the Charge Point supports an Authorization Cache. If this key reports a value of true, the Authorization Cache is enabled.",
    "origin": "OCPP"
  },
  {
    "name": "AuthorizeRemoteTxRequests",
    "required": true,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Whether a remote request to start a transaction in the form of a RemoteStartTransaction.req message should be authorized beforehand like a local action to start a transaction.",
    "origin": "OCPP"
  },
  {
    "name": "BlinkRepeat",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "",
    "unit": "times",
    "description": "Number of times to blink Charge Point lighting when signalling",
    "origin": "OCPP"
  },
  {
    "name": "ClockAlignedDataInterval",
    "required": true,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "900",
    "unit": "seconds",
    "description": "Size (in seconds) of the clock-aligned data interval. This is the size (in seconds) of the set of evenly spaced aggregation intervals per day, starting at 00:00:00 (midnight). For example, a value of 900 (15 minutes) indicates that every day should be broken into 96 15-minute intervals.",
    "origin": "OCPP"
  },
  {
    "name": "ConnectionTimeOut",
    "required": true,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "",
    "unit": "seconds",
    "description": "Interval *from beginning of status: 'Preparing' until incipient Transaction is automatically canceled, due to failure of EV driver to (correctly) insert the charging cable connector(s) into the appropriate socket(s). The Charge Point SHALL go back to the original state, probably: 'Available'.",
    "origin": "OCPP"
  },
  {
    "name": "ConnectorPhaseRotation",
    "required": true,
    "read": true,
    "write": true,
    "type": "CSL",
    "defaultValue": "",
    "unit": "",
    "description": "The phase rotation per connector in respect to the connector’s electrical meter (or if absent, the grid connection). Possible values per connector are: NotApplicable (for Single phase or DC Charge Points) Unknown (not (yet) known) RST (Standard Reference Phasing) RTS (Reversed Reference Phasing) SRT (Reversed 240 degree rotation) STR (Standard 120 degree rotation) TRS (Standard 240 degree rotation) TSR (Reversed 120 degree rotation) R can be identified as phase 1 (L1), S as phase 2 (L2), T as phase 3 (L3). If known, the Charge Point MAY also report the phase rotation between the grid connection and the main energymeter by using index number Zero (0). Values are reported in CSL, formatted: 0.RST, 1.RST, 2.RTS",
    "origin": "OCPP"
  },
  {
    "name": "ConnectorPhaseRotationMaxLength",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of items in a ConnectorPhaseRotation Configuration Key.",
    "origin": "OCPP"
  },
  {
    "name": "GetConfigurationMaxKeys",
    "required": true,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of requested configuration keys in a GetConfiguration.req PDU.",
    "origin": "OCPP"
  },
  {
    "name": "HeartbeatInterval",
    "required": true,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "300",
    "unit": "seconds",
    "description": "Interval of inactivity (no OCPP exchanges) with central system after which the Charge Point should send a Heartbeat.req PDU",
    "origin": "OCPP"
  },
  {
    "name": "LightIntensity",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "",
    "unit": "%",
    "description": "Percentage of maximum intensity at which to illuminate Charge Point lighting",
    "origin": "OCPP"
  },
  {
    "name": "LocalAuthorizeOffline",
    "required": true,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Whether the Charge Point, when offline, will start a transaction for locally-authorized identifiers using the Authorization Cache and/or the Local Authorization List.",
    "origin": "OCPP"
  },
  {
    "name": "LocalPreAuthorize",
    "required": true,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Whether the Charge Point, when online, will start a transaction for locally-authorized identifiers without waiting for or requesting an Authorize.conf from the Central System",
    "origin": "OCPP"
  },
  {
    "name": "MaxEnergyOnInvalidId",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "500",
    "unit": "Wh",
    "description": "Maximum energy in Wh delivered when an identifier is invalidated by the Central System after start of a transaction.",
    "origin": "OCPP"
  },
  {
    "name": "MeterValuesAlignedData",
    "required": true,
    "read": true,
    "write": true,
    "type": "CSL",
    "defaultValue": "Energy.Active.Import.Register, Power.Active.Import",
    "unit": "",
    "description": "Clock-aligned measurand(s) to be included in a MeterValues.req PDU, every ClockAlignedDataInterval seconds",
    "origin": "OCPP"
  },
  {
    "name": "MeterValuesAlignedDataMaxLength",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of items in a MeterValuesAlignedData Configuration Key.",
    "origin": "OCPP"
  },
  {
    "name": "MeterValuesSampledData",
    "required": true,
    "read": true,
    "write": true,
    "type": "CSL",
    "defaultValue": "Energy.Active.Import.Register, Power.Active.Import",
    "unit": "",
    "description": "Sampled measurands to be included in a MeterValues.req PDU, every MeterValueSampleInterval seconds. Where applicable, the Measurand is combined with the optional phase; for instance: Voltage.L1 Default: 'Energy.Active.Import.Register'",
    "origin": "OCPP"
  },
  {
    "name": "MeterValuesSampledDataMaxLength",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of items in a MeterValuesSampledData Configuration Key.",
    "origin": "OCPP"
  },
  {
    "name": "MeterValueSampleInterval",
    "required": true,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "60",
    "unit": "seconds",
    "description": "Interval between sampling of metering (or other) data, intended to be transmitted by 'MeterValues' PDUs. For charging session data (ConnectorId>0), samples are acquired and transmitted periodically at this interval from the start of the charging transaction. A value of '0' (numeric zero), by convention, is to be interpreted to mean that no sampled data should be transmitted.",
    "origin": "OCPP"
  },
  {
    "name": "MinimumStatusDuration",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "",
    "unit": "seconds",
    "description": "The minimum duration that a Charge Point or Connector status is stable before a StatusNotification.req PDU is sent to the Central System.",
    "origin": "OCPP"
  },
  {
    "name": "NumberOfConnectors",
    "required": true,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "The number of physical charging connectors of this Charge Point.",
    "origin": "OCPP"
  },
  {
    "name": "ResetRetries",
    "required": true,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "",
    "unit": "times",
    "description": "Number of times to retry an unsuccessful reset of the Charge Point.",
    "origin": "OCPP"
  },
  {
    "name": "StopTransactionOnEVSideDisconnect",
    "required": true,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "When set to true, the Charge Point SHALL administratively stop the transaction when the cable is unplugged from the EV.",
    "origin": "OCPP"
  },
  {
    "name": "StopTransactionOnInvalidId",
    "required": true,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Whether the Charge Point will stop an ongoing transaction when it receives a non- Accepted authorization status in a StartTransaction.conf for this transaction",
    "origin": "OCPP"
  },
  {
    "name": "StopTxnAlignedData",
    "required": true,
    "read": true,
    "write": true,
    "type": "CSL",
    "defaultValue": "Energy.Active.Import.Register",
    "unit": "",
    "description": "Clock-aligned periodic measurand(s) to be included in the TransactionData element of StopTransaction.req MeterValues.req PDU for every ClockAlignedDataInterval of the Transaction",
    "origin": "OCPP"
  },
  {
    "name": "StopTxnAlignedDataMaxLength",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of items in a StopTxnAlignedData Configuration Key.",
    "origin": "OCPP"
  },
  {
    "name": "StopTxnSampledData",
    "required": true,
    "read": true,
    "write": true,
    "type": "CSL",
    "defaultValue": "Energy.Active.Import.Register, Power.Active.Import",
    "unit": "",
    "description": "Sampled measurands to be included in the TransactionData element of StopTransaction.req PDU, every MeterValueSampleInterval seconds from the start of the charging session",
    "origin": "OCPP"
  },
  {
    "name": "StopTxnSampledDataMaxLength",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of items in a StopTxnSampledData Configuration Key.",
    "origin": "OCPP"
  },
  {
    "name": "SupportedFeatureProfiles",
    "required": true,
    "read": true,
    "write": false,
    "type": "CSL",
    "defaultValue": "",
    "unit": "",
    "description": "A list of supported Feature Profiles. Possible profile identifiers: Core, FirmwareManagement, LocalAuthListManagement, Reservation, SmartCharging and RemoteTrigger.",
    "origin": "OCPP"
  },
  {
    "name": "SupportedFeatureProfilesMaxLength",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of items in a SupportedFeatureProfiles Configuration Key.",
    "origin": "OCPP"
  },
  {
    "name": "TransactionMessageAttempts",
    "required": true,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "",
    "unit": "times",
    "description": "How often the Charge Point should try to submit a transaction-related message when the Central System fails to process it.",
    "origin": "OCPP"
  },
  {
    "name": "TransactionMessageRetryInterval",
    "required": true,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "",
    "unit": "seconds",
    "description": "How long the Charge Point should wait before resubmitting a transaction-related message that the Central System failed to process.",
    "origin": "OCPP"
  },
  {
    "name": "UnlockConnectorOnEVSideDisconnect",
    "required": true,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "When set to true, the Charge Point SHALL unlock the cable on Charge Point side when the cable is unplugged at the EV.",
    "origin": "OCPP"
  },
  {
    "name": "WebSocketPingInterval",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "",
    "unit": "seconds",
    "description": "Only relevant for websocket implementations. 0 disables client side websocket Ping/Pong. In this case there is either no ping/pong or the server initiates the ping and client responds with Pong. Positive values are interpreted as number of seconds between pings. Negative values are not allowed. ChangeConfiguration is expected to return a REJECTED result.",
    "origin": "OCPP"
  },
  {
    "name": "LocalAuthListEnabled",
    "required": true,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Whether the Local Authorization List is enabled",
    "origin": "OCPP"
  },
  {
    "name": "LocalAuthListMaxLength",
    "required": true,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of identifications that can be stored in the Local Authorization List",
    "origin": "OCPP"
  },
  {
    "name": "SendLocalListMaxLength",
    "required": true,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of identifications that can be send in a single SendLocalList.req",
    "origin": "OCPP"
  },
  {
    "name": "ReserveConnectorZeroSupported",
    "required": false,
    "read": true,
    "write": false,
    "type": "boolean",
    "defaultValue": "",
    "unit": "",
    "description": "If this configuration key is present and set to true: Charge Point support reservations on connector 0.",
    "origin": "OCPP"
  },
  {
    "name": "ChargeProfileMaxStackLevel",
    "required": true,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Max StackLevel of a ChargingProfile. The number defined also indicates the max allowed number of installed charging schedules per Charging Profile Purposes.",
    "origin": "OCPP"
  },
  {
    "name": "ChargingScheduleAllowedChargingRateUnit",
    "required": true,
    "read": true,
    "write": false,
    "type": "CSL",
    "defaultValue": "",
    "unit": "",
    "description": "A list of supported quantities for use in a ChargingSchedule. Allowed values: 'Current' and 'Power'",
    "origin": "OCPP"
  },
  {
    "name": "ChargingScheduleMaxPeriods",
    "required": true,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of periods that may be defined per ChargingSchedule.",
    "origin": "OCPP"
  },
  {
    "name": "ConnectorSwitch3to1PhaseSupported",
    "required": false,
    "read": true,
    "write": false,
    "type": "boolean",
    "defaultValue": "",
    "unit": "",
    "description": "If defined and true, this Charge Point support switching from 3 to 1 phase during a Transaction.",
    "origin": "OCPP"
  },
  {
    "name": "MaxChargingProfilesInstalled",
    "required": true,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of Charging profiles installed at a time",
    "origin": "OCPP"
  },
  {
    "name": "ExternalAuthorizationRequired",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "",
    "unit": "",
    "description": "Sets AuthorizationRequired on the charger. If off, no idTag is sent when an EV is connected, and charging can start without authorization.",
    "origin": "easee"
  },
  {
    "name": "LockConnectorPhaseMode",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "",
    "unit": "",
    "description": "",
    "origin": "easee"
  },
  {
    "name": "MeterValuesInTxnSampledData",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "",
    "unit": "",
    "description": "",
    "origin": "easee"
  },
  {
    "name": "DynamicChargerCurrent",
    "required": false,
    "read": true,
    "write": true,
    "type": "double",
    "defaultValue": "",
    "unit": "",
    "description": "Dynamic current on charger level.",
    "origin": "easee"
  },
  {
    "name": "DynamicCircuitCurrent",
    "required": false,
    "read": true,
    "write": true,
    "type": "double",
    "defaultValue": "",
    "unit": "",
    "description": "Dynamic current on circuit level.",
    "origin": "easee"
  },
  {
    "name": "freecharging",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "",
    "unit": "",
    "description": "Freecharging is a mode where chargers have a “known” ID tag to use for authentication when a EV is plugged in. When OCPP configuration key “freecharging” is set to true for a charger it will “simulate” a user provided ID token and request authorization from the central system with the tag from “rfidfreecharging” from its configuration. This allows chargers to be configured as “Plug&Charge” while still giving the ability to associate usage with a User/Tag in the central system.",
    "origin": "easee"
  },
  {
    "name": "rfidtagfreecharging",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "The rfidtag to be used when FreeCharging mode is activated",
    "origin": "easee"
  },
  {
    "name": "OperatorMaxCurrent",
    "required": false,
    "read": true,
    "write": true,
    "type": "double",
    "defaultValue": "",
    "unit": "",
    "description": "The maximum current the charger can draw from the grid as set by the operator",
    "origin": "easee"
  },
  {
    "name": "CellRSSI",
    "required": false,
    "read": true,
    "write": false,
    "type": "double",
    "defaultValue": "",
    "unit": "",
    "description": "Signal strength indicator for the cellular connection in decibels",
    "origin": "easee"
  },
  {
    "name": "WiFiRSSI",
    "required": false,
    "read": true,
    "write": false,
    "type": "double",
    "defaultValue": "",
    "unit": "",
    "description": "Signal strength indicator for the wifi connection in decibels",
    "origin": "easee"
  },
  {
    "name": "LocalRSSI",
    "required": false,
    "read": true,
    "write": false,
    "type": "double",
    "defaultValue": "",
    "unit": "",
    "description": "Signal strength indicator for the radio link connection in decibels",
    "origin": "easee"
  },
  {
    "name": "ChargerRAT",
    "required": false,
    "read": true,
    "write": false,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Which radio technology the charger is using (cellular or wifi)",
    "origin": "easee"
  },
  {
    "name": "FreeCharging",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "",
    "unit": "",
    "description": "If this config option is set to true, the charger will skip Authorize-call before starting a transaction and will go directly to StartTransaction. When free charging is enabled, the StartTransaction’s idTag will be populated with an empty string, or the configured default idTag. The default idTag can be set from Zaptec Portal, or through the FreeChargingIdTag configuration key. Authorization needs to be enabled in the Zaptec Portal to use this feature. The FreeCharging config value will be read only if authorization is not enabled.",
    "origin": "zaptec"
  },
  {
    "name": "FreeChargingIdTag",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "The idTag to use in free charging mode. See more in the FreeCharging custom configuration key.",
    "origin": "zaptec"
  },
  {
    "name": "LockCablePermanently",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "false",
    "unit": "",
    "description": "If this config is set to true, the connected cable will permanently lock to the charging station. It will stay permanently locked until the setting is set to false, or it is unlocked in Zaptec Portal or app.",
    "origin": "zaptec"
  },
  {
    "name": "EnableTransactionBeginMeterValues",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Enables sending MV with context=Transaction.Begin at session start",
    "origin": "hager"
  },
  {
    "name": "EnableTransactionEndMeterValues",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Enables sending MV with context=Transaction.End at session stop",
    "origin": "hager"
  },
  {
    "name": "IoTechaFirmwareUpdateSymmetricKey",
    "required": false,
    "read": true,
    "write": true,
    "type": "",
    "defaultValue": "",
    "unit": "",
    "description": "Keys to verify and unpack signed update (sent via FirmwareUpdate) if signed updates are enabled",
    "origin": "hager"
  },
  {
    "name": "IoTechaFirmwareUpdateSignatureKey",
    "required": false,
    "read": true,
    "write": true,
    "type": "",
    "defaultValue": "",
    "unit": "",
    "description": "Keys to verify and unpack signed update (sent via FirmwareUpdate) if signed updates are enabled",
    "origin": "hager"
  },
  {
    "name": "IoTechaFirmwareUpdateSha256sum",
    "required": false,
    "read": true,
    "write": true,
    "type": "",
    "defaultValue": "",
    "unit": "",
    "description": "Keys to verify and unpack signed update (sent via FirmwareUpdate) if signed updates are enabled",
    "origin": "hager"
  },
  {
    "name": "CentralSystemURL",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "ws://",
    "unit": "",
    "description": "Sets connection URL. Can be wss or ws. Should have '/' at the end.",
    "origin": "hager"
  },
  {
    "name": "CentralSystemVersion",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "1.6",
    "unit": "",
    "description": "",
    "origin": "hager"
  },
  {
    "name": "LanMode",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "dhcp",
    "unit": "",
    "description": "dhcp or manual. Enables or disables DHCP client for Ethernet interface.",
    "origin": "hager"
  },
  {
    "name": "LanStaticIp",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "192.168.0.100",
    "unit": "",
    "description": "IP to set for Ethernet interface when DHCP client is disabled",
    "origin": "hager"
  },
  {
    "name": "LanStaticGateway",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "0.0.0.0",
    "unit": "",
    "description": "Gateway to set for Ethernet interface when DHCP client is disabled",
    "origin": "hager"
  },
  {
    "name": "LanStaticNetmask",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "255.255.255.0",
    "unit": "",
    "description": "Netmask to set for Ethernet interface when DHCP client is disabled",
    "origin": "hager"
  },
  {
    "name": "DelayForRestartTxAfterPowerLoss",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "300",
    "unit": "",
    "description": "Max time in seconds allowed after Power Loss to resume charging session",
    "origin": "hager"
  },
  {
    "name": "DisableISO15118Communication",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Disables Smart Charging",
    "origin": "hager"
  },
  {
    "name": "RfidTagReaderEnabled",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "OCPP",
    "unit": "",
    "description": "OCPP or Local. Do not use in along with IoTechaAuthorizationMode. RfidTagAuthMode=OCPP is the same as IoTechaAuthorizationMode=OCPP Full. RfidTagAuthMode=Local and RfidTagReaderEnabled=true is the same as IoTechaAuthorizationMode=Standalone Local. RfidTagAuthMode=Local and RfidTagReaderEnabled=false is the same as IoTechaAuthorizationMode=Standalone Free Access",
    "origin": "hager"
  },
  {
    "name": "AllowRestartTxAfterPowerLoss",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Enables resuming charging session after Power Loss without presenting token",
    "origin": "hager"
  },
  {
    "name": "RfidTagForRestartTxAfterPowerLoss",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "POWER_LOSS_TAG",
    "unit": "",
    "description": "Tag for sending when resuming Basic AC charging session after Power Loss",
    "origin": "hager"
  },
  {
    "name": "IoTechaBootMode",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "Upgrade",
    "unit": "",
    "description": "Upgrade or Factory. Indicates booting mode: upgrade - board booted into main partition, factory - board booted into recovery partition with limited functionality",
    "origin": "hager"
  },
  {
    "name": "IoTechaOcppOfflineAuthMode",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "Free Access",
    "unit": "",
    "description": "Not used, use LocalAuthorizeOffline instead",
    "origin": "hager"
  },
  {
    "name": "RfidTagStandaloneTag",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "RFID Reader Disabled",
    "unit": "",
    "description": "Tag for sending in Start/StopTransaction in Free Access mode",
    "origin": "hager"
  },
  {
    "name": "IoTechaHeartbeatSyncTime",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Enables synchronization of local time using timestamps from Central System in Bootnotification and Heatbeats",
    "origin": "hager"
  },
  {
    "name": "IoTechaDischargeScheduleEnabled",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "false",
    "unit": "",
    "description": "Internal",
    "origin": "hager"
  },
  {
    "name": "IoTechaOCPPFreeAccessTokenId",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "RFID Reader Disabled",
    "unit": "",
    "description": "Tag for sending in Start/StopTransaction in Free Access mode (duplicates RfidTagStandaloneTag)",
    "origin": "hager"
  },
  {
    "name": "IoTechaAuthorizationMode",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "OCPP Full",
    "unit": "",
    "description": "OCPP Full - tokens authorize using OCPP Authorize.req. Standalone Local - tokens authorize using internal DB. Standalone Free Access - charging starts without token presented. Do not use in along with RfidTagReaderEnabled and RfidTagAuthMode",
    "origin": "hager"
  },
  {
    "name": "EV41SuspendChargingEnabled",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "TRUE",
    "unit": "",
    "description": "",
    "origin": "hager"
  },
  {
    "name": "FreevendEnabled",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "false",
    "unit": "",
    "description": "In Free Vend mode authorization is disabled and charging could be started without authorization. When this mode is enabled, Authorize message will not be sent to Central System. StartTransaction message will be sent as usually at the beginning of charging sesssion.",
    "origin": "daze"
  },
  {
    "name": "FreevendIdTag",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "In Free Vend mode, use this key to set idTag. Max length is 20 like IdToken type. Central system should be configured to accept StartTransaction with idTag configured for Free Vend mode.",
    "origin": "daze"
  },
  {
    "name": "TimeOffset",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "00:00",
    "unit": "",
    "description": "This is used for display/local time purposes only. Configured current local time offset in the UTC time offset format. Let say for US, 5 hours ahead of UTC time. So, the value to set \"-05:00\". If this is not set/empty, it will show in UTC format",
    "origin": "daze"
  },
  {
    "name": "NextTimeOffsetTransitionDateTime",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "This is used for display/local time purposes only. On this date time, the clock displayed to the EV driver will be given the new offset as configured via 'TimeOffsetNextTransition'. For example, \"2022-03-28T02:00:00+01:00\". It is represented ac-cording to the ISO8601 standard.",
    "origin": "daze"
  },
  {
    "name": "TimeOffsetNextTransition",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "00:00",
    "unit": "",
    "description": "This is used for display/local time purposes only. New offset that will be set on the next time offset transition as con-figured via 'NextTimeOffsetTransitionDateTime'. For example, \"-04:00\"",
    "origin": "daze"
  },
  {
    "name": "Cst_BackendUrl",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Change the Central system URL, eg: wss://ocpp.sintio.app/ocpp16/{organizationId}/. After the changes, 'RebotRequired' response is triggered, and it will take effect after restarting. Cannot be modified while charging.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_ChargeBoxId",
    "required": false,
    "read": true,
    "write": false,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Change the Charge box ID, default as SN. After the changes, 'RebotRequired' response is triggered, and it will take effect after restarting.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_rssi_values",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "The signal strength of the WiFi/Cellular based on the connectivity.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_NotNetworkMeterValueSampleInterval",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "0",
    "unit": "",
    "description": "Sampling interval for metervalue when the charger is offline.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_FreeVendActive",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "FALSE",
    "unit": "",
    "description": "Plug in to start charging and unplug to stop.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_FreeVendIdTag",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "A0000000",
    "unit": "",
    "description": "When the value is empty, it is represented as 'A0000000'.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_CaCert",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Certification",
    "origin": "nexblue"
  },
  {
    "name": "Cst_ReconnectInterva",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "10",
    "unit": "",
    "description": "The interval of reconnection",
    "origin": "nexblue"
  },
  {
    "name": "Cst_PreBootTransactions",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "FALSE",
    "unit": "",
    "description": "Whether or not a transaction can be initiated before the BootNotification successfully completes.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_SilentOfflineTransactions",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "FALSE",
    "unit": "",
    "description": "If the EVSE goes offline, whether or not it can continue to charge without sending StartTx / StopTx to the server when going online again.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_AuthorizationTimeout",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "20",
    "unit": "",
    "description": "How long the EVSE tries the Authorize request before it enters offline mode.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_MeterValueCacheSize",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "1",
    "unit": "",
    "description": "How many data can be cached in MeterValue.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_StopTxnDataCapturePeriodic",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "FALSE",
    "unit": "",
    "description": "Whether or not to enable stop Txn Data timer logging.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_ModemMeterValueSampleInterval",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "0",
    "unit": "",
    "description": "Sampling interval for metervalue when the charger is connected to cloud via 4G. Default close.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_ModemStateBoot",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Whether or not the charger is connected to cloud via 4G.",
    "origin": "nexblue"
  },
  {
    "name": "AdditionalRootCertificateCheck",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "false",
    "unit": "",
    "description": "When set to true, only one certificate (plus a temporarily fallback certificate) of certificateType CentralSystemRootCertificate is allowed to be installed at a time. When installing a new Central System Root certificate, the new certificate SHALL replace the old one AND the new Central System Root Certificate MUST be signed by the old Central System Root Certificate it is replacing. This configuration key is required unless only 'security profile 1 - Unsecured Transport with Basic Authentication' is implemented. Please note that security profile 1 SHOULD only be used in trusted networks. Note: When using this additional security mechanism please be aware that the Charge Point needs to perform a full certificate chain verification when the new Central System Root certificate is being installed. However, once the old Central System Root certificate is set as the fallback certificate, the Charge Point needs to perform a partial certificate chain verification when verifying the server certificate during the TLS handshake. Otherwise the verification will fail once the old Central System Root (fallback) certificate is either expired or removed.",
    "origin": "keba"
  },
  {
    "name": "AmountConnectors",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "1",
    "unit": "",
    "description": "The number of physical charging connectors of this Charge Point. Max number of connected PDCs. In the OCPP 1.6 specification the max. amount of connected PDCs (NumberOfConnectors) is read-only.",
    "origin": "keba"
  },
  {
    "name": "AsymmNetworkCheckerTaskInitialDelay",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "15",
    "unit": "s",
    "description": "Initial delay when scheduling task (in seconds)",
    "origin": "keba"
  },
  {
    "name": "AsymmNetworkCheckerTaskRetryInterval",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "10",
    "unit": "s",
    "description": "Retry interval when scheduling task (in seconds)",
    "origin": "keba"
  },
  {
    "name": "AsymmNetworkEnabled",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "false",
    "unit": "",
    "description": "Enable or disable asymmetric load prevention on charging network.",
    "origin": "keba"
  },
  {
    "name": "AuthorizationEnabled",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "false",
    "unit": "",
    "description": "If the user is expected to swipe an RFID in order to charge the EV.",
    "origin": "keba"
  },
  {
    "name": "AuthorizationKey",
    "required": false,
    "read": false,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "The basic authentication password is used for HTTP Basic Authentication, minimal length: 16 bytes. It is strongly advised to be randomly generated binary to get maximal entropy. Hexadecimal represented (20 bytes maximum, represented as a string of up to 40 hexadecimal digits). This configuration key is write-only, so that it cannot be accidentally stored in plaintext by the Central System when it reads out all configuration keys. This configuration key is required unless only 'security profile 3 - TLS with client side certificates' is implemented. Encrypted 40-character hexadecimal representation of the 20-byte authorization key used for BasicAuthentication in OCPP-1.6J. Only needed for JSON OCPP Communication.",
    "origin": "keba"
  },
  {
    "name": "AuthorizationModeOffline",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "OfflineLocalAuthorization",
    "unit": "",
    "description": "OfflineLocalUnknownAuthorization: In offline mode all RFID cards that are not stored locally on the charging station are accepted. All RFID cards stored locally on the charging station with a status other than 'accepted' are rejected. OfflineLocalAuthorization: In offline mode the locally stored RFID cards are accepted. OfflineNoAuthorization: In offline mode everybody can charge by swiping a card. OfflineNoCharging: In offline mode charging is not possible. OfflineFreeCharging: In offline mode authorization is turned off.",
    "origin": "keba"
  },
  {
    "name": "AuthorizationModeOnline",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "FirstLocal",
    "unit": "",
    "description": "'FirstLocal': needs to be selected if the authorization request should be checked against the RFID cards stored locally on the charging station. Select this mode if no OCPP backend is used. If the RFID card is not stored locally and an OCPP backend is used, it is checked against the RFID cards stored on the OCPP backend. 'FirstOnline': needs to be selected if the authorization request should be checked against the RFID cards stored on the OCPP backend. 'OnlyLocal': needs to be selected if the authorization request should only be checked against the RFID cards stored locally on the charging station. If the RFID is not stored locally and an OCPP backend is used, it is not checked against the RFID cards stored on the OCPP backend.",
    "origin": "keba"
  },
  {
    "name": "CentralSystemAddress",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "OCPP Central System Address. Max 255 characters. Can be empty.",
    "origin": "keba"
  },
  {
    "name": "CentralSystemPath",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "OCPP Central System Path, OCPP Central System Path Readable <= P30x_SW_1_12, Read & Editable >= P30x_SW_1_13",
    "origin": "keba"
  },
  {
    "name": "CentralSystemPort",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "OCPP Central System Address Port. empty, 1...65535",
    "origin": "keba"
  },
  {
    "name": "ChargeBoxIdentity",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "ChargeBoxIdentity which is sent in the OCPP boot notification to the backend. The identity presented in host messages. The identity of the Charge point presented in host messages. In case of preconfigured P30 this parameter can only be the serial number of P30 or a progressive number. It can be also included a prefix that does not change. e.g. prefix 45 plus the serial number 17619300 so Chargepoint identity= 4517619300 e.g progressive number A starting number is needed, e.g. 4000 every produced P30 will have a progressive charge point identity number (4001, 4002, 4003, etc…) e.g. prefix with progressive number prefix 45 and starting number 1000 Chargepoint identity will be at start 451000 After 999 P30 the parameter will switch to the next thousand, Chargepoint identity will be 452000",
    "origin": "keba"
  },
  {
    "name": "ChargepointAddress",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "localhost",
    "unit": "",
    "description": "OCPP Chargepoint Address only needed for http connection; no need for websockets. The address on which ChargePointService is published. A manual insertion of the IP Address is required. If the station and the Back-End are in the same network, insert the station's local IP address (needs to be static). If they are not in the same network, this IP must be publically reachable. If 'localhost' then the IP address of the loopback interface (HostConnectorChargepointPreferredInterface) is used. Only needed for SOAP OCPP Communication.",
    "origin": "keba"
  },
  {
    "name": "ChargepointPort",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "12801",
    "unit": "",
    "description": "OCPP ChargePoint port, Only needed for SOAP OCPP Communication no need for websockets. The port on which ChargePointService is published",
    "origin": "keba"
  },
  {
    "name": "Connect2ConnectorSerial2",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Serial number of client PDC_2",
    "origin": "keba"
  },
  {
    "name": "Connect2ConnectorSerial3",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Serial number of client PDC_3",
    "origin": "keba"
  },
  {
    "name": "Connect2ConnectorSerial4",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Serial number of client PDC_4",
    "origin": "keba"
  },
  {
    "name": "Connect2ConnectorSerial5",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Serial number of client PDC_5",
    "origin": "keba"
  },
  {
    "name": "Connect2ConnectorSerial6",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Serial number of client PDC_6",
    "origin": "keba"
  },
  {
    "name": "Connect2ConnectorSerial7",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Serial number of client PDC_7",
    "origin": "keba"
  },
  {
    "name": "Connect2ConnectorSerial8",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Serial number of client PDC_8",
    "origin": "keba"
  },
  {
    "name": "Connect2ConnectorSerial9",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Serial number of client PDC_9",
    "origin": "keba"
  },
  {
    "name": "Connect2ConnectorSerial10",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Serial number of client PDC_10",
    "origin": "keba"
  },
  {
    "name": "Connect2ConnectorSerial11",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Serial number of client PDC_11",
    "origin": "keba"
  },
  {
    "name": "Connect2ConnectorSerial12",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Serial number of client PDC_12",
    "origin": "keba"
  },
  {
    "name": "Connect2ConnectorSerial13",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Serial number of client PDC_13",
    "origin": "keba"
  },
  {
    "name": "Connect2ConnectorSerial14",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Serial number of client PDC_14",
    "origin": "keba"
  },
  {
    "name": "Connect2ConnectorSerial15",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Serial number of client PDC_15",
    "origin": "keba"
  },
  {
    "name": "Connect2ConnectorSerial16",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Serial number of client PDC_16",
    "origin": "keba"
  },
  {
    "name": "GaroActiveErrors",
    "required": false,
    "read": true,
    "write": false,
    "type": "array",
    "defaultValue": "",
    "unit": "",
    "description": "A list of currently active errors",
    "origin": "garo"
  },
  {
    "name": "GaroAdminPassword",
    "required": false,
    "read": false,
    "write": true,
    "type": "string",
    "defaultValue": "some-secret-word",
    "unit": "",
    "description": "Password for Charging Unit administration",
    "origin": "garo"
  },
  {
    "name": "GaroAllow1PhaseCharging",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "True",
    "unit": "",
    "description": "Allow one-phase EV charging",
    "origin": "garo"
  },
  {
    "name": "GaroAllow2PhaseCharging",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "False",
    "unit": "",
    "description": "Allow two-phase EV charging. Note: RCD faults occur with some EVs",
    "origin": "garo"
  },
  {
    "name": "GaroAllow3PhaseCharging",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "True",
    "unit": "",
    "description": "Allow three-phase EV charging",
    "origin": "garo"
  },
  {
    "name": "GaroAudioEnabled",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "True",
    "unit": "",
    "description": "Set buzzer on or off",
    "origin": "garo"
  },
  {
    "name": "GaroBracketMaxCurrent",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "16",
    "unit": "A",
    "description": "Maximum current for bracket",
    "origin": "garo"
  },
  {
    "name": "GaroChargePauseMinTime",
    "required": false,
    "read": true,
    "write": true,
    "type": "number",
    "defaultValue": "120.0",
    "unit": "s",
    "description": "(Experimental, do not change) Minimum allowed time for pauses during charging",
    "origin": "garo"
  },
  {
    "name": "GaroClientCert",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Certificate file for security profile 3. PEM format with private key",
    "origin": "garo"
  },
  {
    "name": "GaroClockAlignedDataIntervalSpread",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "0",
    "unit": "s",
    "description": "Size (in seconds) of random delay for sending clock aligned meter value",
    "origin": "garo"
  },
  {
    "name": "GaroConnectionGroupDevices1",
    "required": false,
    "read": true,
    "write": true,
    "type": "array",
    "defaultValue": "",
    "unit": "",
    "description": "Devices in connection group (1): deviceId[:groupKey]. Colon can be replaced with < for only DLM services or > for only network services",
    "origin": "garo"
  },
  {
    "name": "GaroConnectionGroupDevices2",
    "required": false,
    "read": true,
    "write": true,
    "type": "array",
    "defaultValue": "",
    "unit": "",
    "description": "Devices in connection group (2): See description for GaroConnectionGroupDevices1",
    "origin": "garo"
  },
  {
    "name": "GaroConnectionGroupDevices3",
    "required": false,
    "read": true,
    "write": true,
    "type": "array",
    "defaultValue": "",
    "unit": "",
    "description": "Devices in connection group (3): See description for GaroConnectionGroupDevices1",
    "origin": "garo"
  },
  {
    "name": "GaroConnectionGroupDevices4",
    "required": false,
    "read": true,
    "write": true,
    "type": "array",
    "defaultValue": "",
    "unit": "",
    "description": "Devices in connection group (4): See description for GaroConnectionGroupDevices1",
    "origin": "garo"
  },
  {
    "name": "GaroConnectionGroupKey",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Connection group access key (from RFID if empty, Base64 characters only)",
    "origin": "garo"
  },
  {
    "name": "GaroConnectionGroupMaster",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "False",
    "unit": "",
    "description": "Device acts as connection group master",
    "origin": "garo"
  },
  {
    "name": "GaroConnectionGroupMaxCurrent",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "80",
    "unit": "A",
    "description": "Maximum current for connection group",
    "origin": "garo"
  },
  {
    "name": "GaroConnectionGroupName",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Name for connection group",
    "origin": "garo"
  },
  {
    "name": "GaroConnectionGroupSsid",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Connection group (mesh) network to use (automatic if empty)",
    "origin": "garo"
  },
  {
    "name": "GaroConnectorPhases",
    "required": false,
    "read": true,
    "write": true,
    "type": "array",
    "defaultValue": "0.3, 1.3",
    "unit": "",
    "description": "Number of enabled phases for bracket (0) and cable/outlet (1). If negative, 3rd letter and T denotes Neutral. If 0, PE is open",
    "origin": "garo"
  },
  {
    "name": "GaroCsmsUrl",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Local backend URL for this device. In most cases, GaroRemoteCsmsUrl should be used instead (automatic if empty)",
    "origin": "garo"
  },
  {
    "name": "GaroCtRatedInput",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "100",
    "unit": "A",
    "description": "Current Transformer input rating (A)",
    "origin": "garo"
  },
  {
    "name": "GaroCtRatedOutput",
    "required": false,
    "read": true,
    "write": true,
    "type": "number",
    "defaultValue": "0.333",
    "unit": "A",
    "description": "Current Transformer output rating. Values below 1 specify a voltage (0.333), value 1 or above specifies a current (5)",
    "origin": "garo"
  },
  {
    "name": "GaroDeviceId",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Device OCPP identity, overriding bracket/serial",
    "origin": "garo"
  },
  {
    "name": "GaroEmbeddedMeterEnergy",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "0",
    "unit": "Wh",
    "description": "Accumulated active energy from the embedded energy meter",
    "origin": "garo"
  },
  {
    "name": "GaroEmbeddedNumberOfPhases",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "3",
    "unit": "",
    "description": "The number of phases supported by Charging Unit electronics",
    "origin": "garo"
  },
  {
    "name": "GaroEmulatedHw",
    "required": false,
    "read": true,
    "write": false,
    "type": "boolean",
    "defaultValue": "False",
    "unit": "",
    "description": "Emulate device hardware",
    "origin": "garo"
  },
  {
    "name": "GaroEnableInputInvert",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "False",
    "unit": "",
    "description": "If false, limit to GaroEnableInputMaxCurrent when enable input contact is closed. If true, limit to GaroEnableInputMaxCurrent when enable input contact is open",
    "origin": "garo"
  },
  {
    "name": "GaroEnableInputMaxCurrent",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "0",
    "unit": "A",
    "description": "Max current when enable input is active. Use 32 to disregard enable input contact",
    "origin": "garo"
  },
  {
    "name": "GaroFallbackMaxCurrent",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "6",
    "unit": "A",
    "description": "Maximum current to use if cannot connect to DLM Local Controller",
    "origin": "garo"
  },
  {
    "name": "GaroFinishingTimeOut",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "0",
    "unit": "s",
    "description": "How long (seconds) Charging Station should wait for EV driver to remove cable after stopped transaction",
    "origin": "garo"
  },
  {
    "name": "GaroFixedCableMaxCurrent",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "0",
    "unit": "A",
    "description": "CS has outlet if 0, otherwise it has fixed cable with specified ampacity",
    "origin": "garo"
  },
  {
    "name": "GaroFreeChargePolling",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "True",
    "unit": "",
    "description": "Poll CSMS with a rejected free charge tag in SuspendedEVSE state until tag is accepted",
    "origin": "garo"
  },
  {
    "name": "GaroFreeChargeTag",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "0",
    "unit": "",
    "description": "Free charge tag ID: If not empty, enable charging without authorization using this tag ID",
    "origin": "garo"
  },
  {
    "name": "GaroHttpPort",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "80",
    "unit": "",
    "description": "Port number for unencrypted Web and OCPP services",
    "origin": "garo"
  },
  {
    "name": "GaroHttpsPort",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "443",
    "unit": "",
    "description": "Port number for encrypted Web and OCPP services",
    "origin": "garo"
  },
  {
    "name": "GaroIdTokenEncoding",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "hex_little_endian_lowercase",
    "unit": "",
    "description": "Choose mode of encoding RFID tag (idToken)",
    "origin": "garo"
  },
  {
    "name": "GaroImprovedSecurity",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "False",
    "unit": "",
    "description": "If true, follow whitepaper Improved security for OCPP 1.6-J (require signed firmware update etc). Warning: Change to false not allowed even with factory reset",
    "origin": "garo"
  },
  {
    "name": "GaroLightIndication",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Controls LED indication: empty (charging status), Identify (blinks for identification), or a named color",
    "origin": "garo"
  },
  {
    "name": "GaroLogLevel",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "info",
    "unit": "",
    "description": "Threshold level for logging messages",
    "origin": "garo"
  },
  {
    "name": "GaroLossResistance",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "0",
    "unit": "mOhm",
    "description": "Electrical resistance between energy meter and connector/outlet (mOhm, OCMF LR)",
    "origin": "garo"
  },
  {
    "name": "GaroManageNetwork",
    "required": false,
    "read": true,
    "write": false,
    "type": "boolean",
    "defaultValue": "True",
    "unit": "",
    "description": "Enable network interfaces management",
    "origin": "garo"
  },
  {
    "name": "GaroMeshType",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "Legacy",
    "unit": "",
    "description": "Enable improved mesh functions. Legacy and Improved are not compatible. All units need to have a firmware version of 2.2 or newer before Improved is enabled. Only valid on mesh master",
    "origin": "garo"
  },
  {
    "name": "GaroMeterAddress",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "-1",
    "unit": "",
    "description": "Energy Meter address (Modbus/M-Bus) (automatic if -1)",
    "origin": "garo"
  },
  {
    "name": "GaroMeterCurrentCalibration",
    "required": false,
    "read": true,
    "write": false,
    "type": "array",
    "defaultValue": "1.0, 1.0, 1.0",
    "unit": "",
    "description": "Energy Meter Current Calibration (Embedded/CurrentTransformer)",
    "origin": "garo"
  },
  {
    "name": "GaroMeterPort",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "-1",
    "unit": "",
    "description": "Energy Meter port: 1=M-bus/DSMR, 3=Modbus/AMSHAN (automatic if -1)",
    "origin": "garo"
  },
  {
    "name": "GaroMeterScalingFactor",
    "required": false,
    "read": true,
    "write": true,
    "type": "number",
    "defaultValue": "1.0",
    "unit": "",
    "description": "Scaling factor for energy meter values related to current or energy (DSMR/AMSHAN)",
    "origin": "garo"
  },
  {
    "name": "GaroMeterSerialSettings",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "8N1",
    "unit": "",
    "description": "Energy Meter serial communication Data / Parity / Stop bits (Modbus)",
    "origin": "garo"
  },
  {
    "name": "GaroMeterSerialSpeed",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Energy Meter serial communication bitrate (Modbus/M-Bus)",
    "origin": "garo"
  },
  {
    "name": "GaroMeterType",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Energy Meter type: Embedded, ModbusRTU, M-Bus, DSMR (Sweden), AMSHAN (Norway), CurrentTransformer (automatic if empty)",
    "origin": "garo"
  },
  {
    "name": "GaroMeterVoltageCalibration",
    "required": false,
    "read": true,
    "write": false,
    "type": "array",
    "defaultValue": "1.0, 1.0, 1.0",
    "unit": "",
    "description": "Energy Meter voltage Calibration (Embedded)",
    "origin": "garo"
  },
  {
    "name": "GaroModemApn",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "m2m.garoconnect.com",
    "unit": "",
    "description": "Modem access point name (APN)",
    "origin": "garo"
  },
  {
    "name": "GaroModemFirmwareUrl",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "http://manual-garo-maintenance-firmware.s3.eu-west-1.amazonaws.com/modem/",
    "unit": "",
    "description": "URL for modem firmware, current version will be appended",
    "origin": "garo"
  },
  {
    "name": "GaroModemPin",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Modem personal identification number (PIN)",
    "origin": "garo"
  },
  {
    "name": "GaroModemPreferredNetwork",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Preferred mobile network in the form <operator number>,<access technology>. Where operator number is the combination of MCC and MNC. For modem EG915 access technology is 0=GSM/GPRS, 7=LTE. For BG95 0=GSM/GPRS, 8=LTE Cat M1",
    "origin": "garo"
  },
  {
    "name": "GaroNetworkGateway",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Gateway for network connections",
    "origin": "garo"
  },
  {
    "name": "GaroNetworkInterface",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Network connection interface (mesh/wifi/modem/ethernet, automatic if empty)",
    "origin": "garo"
  },
  {
    "name": "GaroNetworkIp",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "IP address for network connection",
    "origin": "garo"
  },
  {
    "name": "GaroNetworkMaskBits",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "24",
    "unit": "",
    "description": "Network mask bits in subnetwork prefix for network connection",
    "origin": "garo"
  },
  {
    "name": "GaroNumberOfRelays",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "7",
    "unit": "",
    "description": "The number of output relays in this Charging Unit",
    "origin": "garo"
  },
  {
    "name": "GaroOcppVersions",
    "required": false,
    "read": true,
    "write": true,
    "type": "array",
    "defaultValue": "",
    "unit": "",
    "description": "OCPP versions to use (automatic if empty)",
    "origin": "garo"
  },
  {
    "name": "GaroOwnerMaxCurrent",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "32",
    "unit": "A",
    "description": "Maximum charging current (owner preference)",
    "origin": "garo"
  },
  {
    "name": "GaroOwnerMinCurrent",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "6",
    "unit": "A",
    "description": "Minimum charging current, required with some car models",
    "origin": "garo"
  },
  {
    "name": "GaroPeContactor",
    "required": false,
    "read": true,
    "write": false,
    "type": "boolean",
    "defaultValue": "False",
    "unit": "",
    "description": "True if Charging Unit has PE contactor",
    "origin": "garo"
  },
  {
    "name": "GaroPmeProtection",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "True",
    "unit": "",
    "description": "Disconnect vehicle from live and PE if line-neutral voltage is too high or too low",
    "origin": "garo"
  },
  {
    "name": "GaroRcdRelayControl",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "True",
    "unit": "",
    "description": "Earth fault relay operation: If true, relays will open when residual current fault is detected. If false, the MCB will trip at all detected faults",
    "origin": "garo"
  },
  {
    "name": "GaroRelayModeChangeMinTime",
    "required": false,
    "read": true,
    "write": true,
    "type": "number",
    "defaultValue": "120.0",
    "unit": "s",
    "description": "(Experimental, do not change) Minimum allowed time between relay mode changes",
    "origin": "garo"
  },
  {
    "name": "GaroRemoteCsmsUrl",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "wss://csms.garo-next-gen.com:443",
    "unit": "",
    "description": "Backend URL, the remote CSMS system that devices connects to, unless overridden by GaroCsmsUrl. Also used with proxies",
    "origin": "garo"
  },
  {
    "name": "GaroRootPassword",
    "required": false,
    "read": false,
    "write": false,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Password hash for Charging Unit manufacturing",
    "origin": "garo"
  },
  {
    "name": "GaroSshEnabled",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "False",
    "unit": "",
    "description": "Enable system SSH server",
    "origin": "garo"
  },
  {
    "name": "GaroSshPublicKey",
    "required": false,
    "read": true,
    "write": false,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Contains the public SSH key used by reverse SSH connections",
    "origin": "garo"
  },
  {
    "name": "GaroSshTunnelUrl",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Enable reverse SSH connections via specified SSH server URL. Changeable after button press. Example: user@host.example.com:port",
    "origin": "garo"
  },
  {
    "name": "GaroStopTransactionOnPowerLoss",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "False",
    "unit": "",
    "description": "If true, the Charging Station stops a transaction upon power failure, and if false it will resume when power is back",
    "origin": "garo"
  },
  {
    "name": "GaroStopTransactionOnUnlockConnector",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "False",
    "unit": "",
    "description": "If true, the Charging Station supports the use of unlock connector to stop an ongoing transaction",
    "origin": "garo"
  },
  {
    "name": "GaroSupplyMaxCurrents",
    "required": false,
    "read": true,
    "write": true,
    "type": "array",
    "defaultValue": "2500, 2500, 2500",
    "unit": "",
    "description": "Maximum current of phases R/S/T allowed by DLM system. Resets if cannot connect to CSMS",
    "origin": "garo"
  },
  {
    "name": "GaroSupportedMeasurands",
    "required": false,
    "read": true,
    "write": false,
    "type": "array",
    "defaultValue": "Current.Import, Current.Export, Current.Offered, Energy.Active.Import.Register, Power.Active.Import, Power.Reactive.Import, Temperature, Voltage",
    "unit": "",
    "description": "A list of supported MeterValue Measurands",
    "origin": "garo"
  },
  {
    "name": "GaroTestMode",
    "required": false,
    "read": true,
    "write": false,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Software test mode (emc_test/temp_test)",
    "origin": "garo"
  },
  {
    "name": "GaroTotalCurrentControl",
    "required": false,
    "read": true,
    "write": true,
    "type": "array",
    "defaultValue": "0, 0",
    "unit": "",
    "description": "Current margin in amps and limiter setting. Margin in use if restriction below minimum current. If limiter is 1, only restrict for current charge session, if limiter is 2, do it permanently",
    "origin": "garo"
  },
  {
    "name": "GaroUnitSerial",
    "required": false,
    "read": true,
    "write": false,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Charging Unit / Load Interface hexadecimal serial number (automatic if empty)",
    "origin": "garo"
  },
  {
    "name": "GaroVerifyCertificates",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "True",
    "unit": "",
    "description": "Verify TLS certificates",
    "origin": "garo"
  },
  {
    "name": "GaroWifiPassword",
    "required": false,
    "read": false,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Password (PSK) for Wi-Fi network connection",
    "origin": "garo"
  },
  {
    "name": "GaroWifiSsid",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "SSID for Wi-Fi network connection",
    "origin": "garo"
  }
]
