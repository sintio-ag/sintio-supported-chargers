[
  {
    "name": "AllowOfflineTxForUnknownId",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "false",
    "unit": "",
    "description": "If this key exists, the Charge Point supports Unknown Offline Authorization. If this key reports a value of true, Unknown Offline Authorization is enabled.",
    "origin": "OCPP"
  },
  {
    "name": "AuthorizationCacheEnabled",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "false",
    "unit": "",
    "description": "If this key exists, the Charge Point supports an Authorization Cache. If this key reports a value of true, the Authorization Cache is enabled.",
    "origin": "OCPP"
  },
  {
    "name": "AuthorizeRemoteTxRequests",
    "required": true,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Whether a remote request to start a transaction in the form of a RemoteStartTransaction.req message should be authorized beforehand like a local action to start a transaction.",
    "origin": "OCPP"
  },
  {
    "name": "BlinkRepeat",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "",
    "unit": "times",
    "description": "Number of times to blink Charge Point lighting when signalling",
    "origin": "OCPP"
  },
  {
    "name": "ClockAlignedDataInterval",
    "required": true,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "900",
    "unit": "seconds",
    "description": "Size (in seconds) of the clock-aligned data interval. This is the size (in seconds) of the set of evenly spaced aggregation intervals per day, starting at 00:00:00 (midnight). For example, a value of 900 (15 minutes) indicates that every day should be broken into 96 15-minute intervals.",
    "origin": "OCPP"
  },
  {
    "name": "ConnectionTimeOut",
    "required": true,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "",
    "unit": "seconds",
    "description": "Interval *from beginning of status: 'Preparing' until incipient Transaction is automatically canceled, due to failure of EV driver to (correctly) insert the charging cable connector(s) into the appropriate socket(s). The Charge Point SHALL go back to the original state, probably: 'Available'.",
    "origin": "OCPP"
  },
  {
    "name": "ConnectorPhaseRotation",
    "required": true,
    "read": true,
    "write": true,
    "type": "CSL",
    "defaultValue": "",
    "unit": "",
    "description": "The phase rotation per connector in respect to the connector’s electrical meter (or if absent, the grid connection). Possible values per connector are: NotApplicable (for Single phase or DC Charge Points) Unknown (not (yet) known) RST (Standard Reference Phasing) RTS (Reversed Reference Phasing) SRT (Reversed 240 degree rotation) STR (Standard 120 degree rotation) TRS (Standard 240 degree rotation) TSR (Reversed 120 degree rotation) R can be identified as phase 1 (L1), S as phase 2 (L2), T as phase 3 (L3). If known, the Charge Point MAY also report the phase rotation between the grid connection and the main energymeter by using index number Zero (0). Values are reported in CSL, formatted: 0.RST, 1.RST, 2.RTS",
    "origin": "OCPP"
  },
  {
    "name": "ConnectorPhaseRotationMaxLength",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of items in a ConnectorPhaseRotation Configuration Key.",
    "origin": "OCPP"
  },
  {
    "name": "GetConfigurationMaxKeys",
    "required": true,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of requested configuration keys in a GetConfiguration.req PDU.",
    "origin": "OCPP"
  },
  {
    "name": "HeartbeatInterval",
    "required": true,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "300",
    "unit": "seconds",
    "description": "Interval of inactivity (no OCPP exchanges) with central system after which the Charge Point should send a Heartbeat.req PDU",
    "origin": "OCPP"
  },
  {
    "name": "LightIntensity",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "",
    "unit": "%",
    "description": "Percentage of maximum intensity at which to illuminate Charge Point lighting",
    "origin": "OCPP"
  },
  {
    "name": "LocalAuthorizeOffline",
    "required": true,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Whether the Charge Point, when offline, will start a transaction for locally-authorized identifiers using the Authorization Cache and/or the Local Authorization List.",
    "origin": "OCPP"
  },
  {
    "name": "LocalPreAuthorize",
    "required": true,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Whether the Charge Point, when online, will start a transaction for locally-authorized identifiers without waiting for or requesting an Authorize.conf from the Central System",
    "origin": "OCPP"
  },
  {
    "name": "MaxEnergyOnInvalidId",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "500",
    "unit": "Wh",
    "description": "Maximum energy in Wh delivered when an identifier is invalidated by the Central System after start of a transaction.",
    "origin": "OCPP"
  },
  {
    "name": "MeterValuesAlignedData",
    "required": true,
    "read": true,
    "write": true,
    "type": "CSL",
    "defaultValue": "Energy.Active.Import.Register, Power.Active.Import",
    "unit": "",
    "description": "Clock-aligned measurand(s) to be included in a MeterValues.req PDU, every ClockAlignedDataInterval seconds",
    "origin": "OCPP"
  },
  {
    "name": "MeterValuesAlignedDataMaxLength",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of items in a MeterValuesAlignedData Configuration Key.",
    "origin": "OCPP"
  },
  {
    "name": "MeterValuesSampledData",
    "required": true,
    "read": true,
    "write": true,
    "type": "CSL",
    "defaultValue": "Energy.Active.Import.Register, Power.Active.Import",
    "unit": "",
    "description": "Sampled measurands to be included in a MeterValues.req PDU, every MeterValueSampleInterval seconds. Where applicable, the Measurand is combined with the optional phase; for instance: Voltage.L1 Default: 'Energy.Active.Import.Register'",
    "origin": "OCPP"
  },
  {
    "name": "MeterValuesSampledDataMaxLength",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of items in a MeterValuesSampledData Configuration Key.",
    "origin": "OCPP"
  },
  {
    "name": "MeterValueSampleInterval",
    "required": true,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "60",
    "unit": "seconds",
    "description": "Interval between sampling of metering (or other) data, intended to be transmitted by 'MeterValues' PDUs. For charging session data (ConnectorId>0), samples are acquired and transmitted periodically at this interval from the start of the charging transaction. A value of '0' (numeric zero), by convention, is to be interpreted to mean that no sampled data should be transmitted.",
    "origin": "OCPP"
  },
  {
    "name": "MinimumStatusDuration",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "",
    "unit": "seconds",
    "description": "The minimum duration that a Charge Point or Connector status is stable before a StatusNotification.req PDU is sent to the Central System.",
    "origin": "OCPP"
  },
  {
    "name": "NumberOfConnectors",
    "required": true,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "The number of physical charging connectors of this Charge Point.",
    "origin": "OCPP"
  },
  {
    "name": "ResetRetries",
    "required": true,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "",
    "unit": "times",
    "description": "Number of times to retry an unsuccessful reset of the Charge Point.",
    "origin": "OCPP"
  },
  {
    "name": "StopTransactionOnEVSideDisconnect",
    "required": true,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "When set to true, the Charge Point SHALL administratively stop the transaction when the cable is unplugged from the EV.",
    "origin": "OCPP"
  },
  {
    "name": "StopTransactionOnInvalidId",
    "required": true,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Whether the Charge Point will stop an ongoing transaction when it receives a non- Accepted authorization status in a StartTransaction.conf for this transaction",
    "origin": "OCPP"
  },
  {
    "name": "StopTxnAlignedData",
    "required": true,
    "read": true,
    "write": true,
    "type": "CSL",
    "defaultValue": "Energy.Active.Import.Register",
    "unit": "",
    "description": "Clock-aligned periodic measurand(s) to be included in the TransactionData element of StopTransaction.req MeterValues.req PDU for every ClockAlignedDataInterval of the Transaction",
    "origin": "OCPP"
  },
  {
    "name": "StopTxnAlignedDataMaxLength",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of items in a StopTxnAlignedData Configuration Key.",
    "origin": "OCPP"
  },
  {
    "name": "StopTxnSampledData",
    "required": true,
    "read": true,
    "write": true,
    "type": "CSL",
    "defaultValue": "Energy.Active.Import.Register, Power.Active.Import",
    "unit": "",
    "description": "Sampled measurands to be included in the TransactionData element of StopTransaction.req PDU, every MeterValueSampleInterval seconds from the start of the charging session",
    "origin": "OCPP"
  },
  {
    "name": "StopTxnSampledDataMaxLength",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of items in a StopTxnSampledData Configuration Key.",
    "origin": "OCPP"
  },
  {
    "name": "SupportedFeatureProfiles",
    "required": true,
    "read": true,
    "write": false,
    "type": "CSL",
    "defaultValue": "",
    "unit": "",
    "description": "A list of supported Feature Profiles. Possible profile identifiers: Core, FirmwareManagement, LocalAuthListManagement, Reservation, SmartCharging and RemoteTrigger.",
    "origin": "OCPP"
  },
  {
    "name": "SupportedFeatureProfilesMaxLength",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of items in a SupportedFeatureProfiles Configuration Key.",
    "origin": "OCPP"
  },
  {
    "name": "TransactionMessageAttempts",
    "required": true,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "",
    "unit": "times",
    "description": "How often the Charge Point should try to submit a transaction-related message when the Central System fails to process it.",
    "origin": "OCPP"
  },
  {
    "name": "TransactionMessageRetryInterval",
    "required": true,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "",
    "unit": "seconds",
    "description": "How long the Charge Point should wait before resubmitting a transaction-related message that the Central System failed to process.",
    "origin": "OCPP"
  },
  {
    "name": "UnlockConnectorOnEVSideDisconnect",
    "required": true,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "When set to true, the Charge Point SHALL unlock the cable on Charge Point side when the cable is unplugged at the EV.",
    "origin": "OCPP"
  },
  {
    "name": "WebSocketPingInterval",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "",
    "unit": "seconds",
    "description": "Only relevant for websocket implementations. 0 disables client side websocket Ping/Pong. In this case there is either no ping/pong or the server initiates the ping and client responds with Pong. Positive values are interpreted as number of seconds between pings. Negative values are not allowed. ChangeConfiguration is expected to return a REJECTED result.",
    "origin": "OCPP"
  },
  {
    "name": "LocalAuthListEnabled",
    "required": true,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Whether the Local Authorization List is enabled",
    "origin": "OCPP"
  },
  {
    "name": "LocalAuthListMaxLength",
    "required": true,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of identifications that can be stored in the Local Authorization List",
    "origin": "OCPP"
  },
  {
    "name": "SendLocalListMaxLength",
    "required": true,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of identifications that can be send in a single SendLocalList.req",
    "origin": "OCPP"
  },
  {
    "name": "ReserveConnectorZeroSupported",
    "required": false,
    "read": true,
    "write": false,
    "type": "boolean",
    "defaultValue": "",
    "unit": "",
    "description": "If this configuration key is present and set to true: Charge Point support reservations on connector 0.",
    "origin": "OCPP"
  },
  {
    "name": "ChargeProfileMaxStackLevel",
    "required": true,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Max StackLevel of a ChargingProfile. The number defined also indicates the max allowed number of installed charging schedules per Charging Profile Purposes.",
    "origin": "OCPP"
  },
  {
    "name": "ChargingScheduleAllowedChargingRateUnit",
    "required": true,
    "read": true,
    "write": false,
    "type": "CSL",
    "defaultValue": "",
    "unit": "",
    "description": "A list of supported quantities for use in a ChargingSchedule. Allowed values: 'Current' and 'Power'",
    "origin": "OCPP"
  },
  {
    "name": "ChargingScheduleMaxPeriods",
    "required": true,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of periods that may be defined per ChargingSchedule.",
    "origin": "OCPP"
  },
  {
    "name": "ConnectorSwitch3to1PhaseSupported",
    "required": false,
    "read": true,
    "write": false,
    "type": "boolean",
    "defaultValue": "",
    "unit": "",
    "description": "If defined and true, this Charge Point support switching from 3 to 1 phase during a Transaction.",
    "origin": "OCPP"
  },
  {
    "name": "MaxChargingProfilesInstalled",
    "required": true,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "Maximum number of Charging profiles installed at a time",
    "origin": "OCPP"
  },
  {
    "name": "ExternalAuthorizationRequired",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "",
    "unit": "",
    "description": "Sets AuthorizationRequired on the charger. If off, no idTag is sent when an EV is connected, and charging can start without authorization.",
    "origin": "easee"
  },
  {
    "name": "LockConnectorPhaseMode",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "",
    "unit": "",
    "description": "",
    "origin": "easee"
  },
  {
    "name": "MeterValuesInTxnSampledData",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "",
    "unit": "",
    "description": "",
    "origin": "easee"
  },
  {
    "name": "DynamicChargerCurrent",
    "required": false,
    "read": true,
    "write": true,
    "type": "double",
    "defaultValue": "",
    "unit": "",
    "description": "Dynamic current on charger level.",
    "origin": "easee"
  },
  {
    "name": "DynamicCircuitCurrent",
    "required": false,
    "read": true,
    "write": true,
    "type": "double",
    "defaultValue": "",
    "unit": "",
    "description": "Dynamic current on circuit level.",
    "origin": "easee"
  },
  {
    "name": "freecharging",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "",
    "unit": "",
    "description": "Freecharging is a mode where chargers have a “known” ID tag to use for authentication when a EV is plugged in. When OCPP configuration key “freecharging” is set to true for a charger it will “simulate” a user provided ID token and request authorization from the central system with the tag from “rfidfreecharging” from its configuration. This allows chargers to be configured as “Plug&Charge” while still giving the ability to associate usage with a User/Tag in the central system.",
    "origin": "easee"
  },
  {
    "name": "rfidtagfreecharging",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "The rfidtag to be used when FreeCharging mode is activated",
    "origin": "easee"
  },
  {
    "name": "OperatorMaxCurrent",
    "required": false,
    "read": true,
    "write": true,
    "type": "double",
    "defaultValue": "",
    "unit": "",
    "description": "The maximum current the charger can draw from the grid as set by the operator",
    "origin": "easee"
  },
  {
    "name": "CellRSSI",
    "required": false,
    "read": true,
    "write": false,
    "type": "double",
    "defaultValue": "",
    "unit": "",
    "description": "Signal strength indicator for the cellular connection in decibels",
    "origin": "easee"
  },
  {
    "name": "WiFiRSSI",
    "required": false,
    "read": true,
    "write": false,
    "type": "double",
    "defaultValue": "",
    "unit": "",
    "description": "Signal strength indicator for the wifi connection in decibels",
    "origin": "easee"
  },
  {
    "name": "LocalRSSI",
    "required": false,
    "read": true,
    "write": false,
    "type": "double",
    "defaultValue": "",
    "unit": "",
    "description": "Signal strength indicator for the radio link connection in decibels",
    "origin": "easee"
  },
  {
    "name": "ChargerRAT",
    "required": false,
    "read": true,
    "write": false,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Which radio technology the charger is using (cellular or wifi)",
    "origin": "easee"
  },
  {
    "name": "FreeCharging",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "",
    "unit": "",
    "description": "If this config option is set to true, the charger will skip Authorize-call before starting a transaction and will go directly to StartTransaction. When free charging is enabled, the StartTransaction’s idTag will be populated with an empty string, or the configured default idTag. The default idTag can be set from Zaptec Portal, or through the FreeChargingIdTag configuration key. Authorization needs to be enabled in the Zaptec Portal to use this feature. The FreeCharging config value will be read only if authorization is not enabled.",
    "origin": "zaptec"
  },
  {
    "name": "FreeChargingIdTag",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "The idTag to use in free charging mode. See more in the FreeCharging custom configuration key.",
    "origin": "zaptec"
  },
  {
    "name": "LockCablePermanently",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "false",
    "unit": "",
    "description": "If this config is set to true, the connected cable will permanently lock to the charging station. It will stay permanently locked until the setting is set to false, or it is unlocked in Zaptec Portal or app.",
    "origin": "zaptec"
  },
  {
    "name": "EnableTransactionBeginMeterValues",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Enables sending MV with context=Transaction.Begin at session start",
    "origin": "hager"
  },
  {
    "name": "EnableTransactionEndMeterValues",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Enables sending MV with context=Transaction.End at session stop",
    "origin": "hager"
  },
  {
    "name": "IoTechaFirmwareUpdateSymmetricKey",
    "required": false,
    "read": true,
    "write": true,
    "type": "",
    "defaultValue": "",
    "unit": "",
    "description": "Keys to verify and unpack signed update (sent via FirmwareUpdate) if signed updates are enabled",
    "origin": "hager"
  },
  {
    "name": "IoTechaFirmwareUpdateSignatureKey",
    "required": false,
    "read": true,
    "write": true,
    "type": "",
    "defaultValue": "",
    "unit": "",
    "description": "Keys to verify and unpack signed update (sent via FirmwareUpdate) if signed updates are enabled",
    "origin": "hager"
  },
  {
    "name": "IoTechaFirmwareUpdateSha256sum",
    "required": false,
    "read": true,
    "write": true,
    "type": "",
    "defaultValue": "",
    "unit": "",
    "description": "Keys to verify and unpack signed update (sent via FirmwareUpdate) if signed updates are enabled",
    "origin": "hager"
  },
  {
    "name": "CentralSystemURL",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "ws://",
    "unit": "",
    "description": "Sets connection URL. Can be wss or ws. Should have '/' at the end.",
    "origin": "hager"
  },
  {
    "name": "CentralSystemVersion",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "1.6",
    "unit": "",
    "description": "",
    "origin": "hager"
  },
  {
    "name": "LanMode",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "dhcp",
    "unit": "",
    "description": "dhcp or manual. Enables or disables DHCP client for Ethernet interface.",
    "origin": "hager"
  },
  {
    "name": "LanStaticIp",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "192.168.0.100",
    "unit": "",
    "description": "IP to set for Ethernet interface when DHCP client is disabled",
    "origin": "hager"
  },
  {
    "name": "LanStaticGateway",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "0.0.0.0",
    "unit": "",
    "description": "Gateway to set for Ethernet interface when DHCP client is disabled",
    "origin": "hager"
  },
  {
    "name": "LanStaticNetmask",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "255.255.255.0",
    "unit": "",
    "description": "Netmask to set for Ethernet interface when DHCP client is disabled",
    "origin": "hager"
  },
  {
    "name": "DelayForRestartTxAfterPowerLoss",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "300",
    "unit": "",
    "description": "Max time in seconds allowed after Power Loss to resume charging session",
    "origin": "hager"
  },
  {
    "name": "DisableISO15118Communication",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Disables Smart Charging",
    "origin": "hager"
  },
  {
    "name": "RfidTagReaderEnabled",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "OCPP",
    "unit": "",
    "description": "OCPP or Local. Do not use in along with IoTechaAuthorizationMode. RfidTagAuthMode=OCPP is the same as IoTechaAuthorizationMode=OCPP Full. RfidTagAuthMode=Local and RfidTagReaderEnabled=true is the same as IoTechaAuthorizationMode=Standalone Local. RfidTagAuthMode=Local and RfidTagReaderEnabled=false is the same as IoTechaAuthorizationMode=Standalone Free Access",
    "origin": "hager"
  },
  {
    "name": "AllowRestartTxAfterPowerLoss",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Enables resuming charging session after Power Loss without presenting token",
    "origin": "hager"
  },
  {
    "name": "RfidTagForRestartTxAfterPowerLoss",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "POWER_LOSS_TAG",
    "unit": "",
    "description": "Tag for sending when resuming Basic AC charging session after Power Loss",
    "origin": "hager"
  },
  {
    "name": "IoTechaBootMode",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "Upgrade",
    "unit": "",
    "description": "Upgrade or Factory. Indicates booting mode: upgrade - board booted into main partition, factory - board booted into recovery partition with limited functionality",
    "origin": "hager"
  },
  {
    "name": "IoTechaOcppOfflineAuthMode",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "Free Access",
    "unit": "",
    "description": "Not used, use LocalAuthorizeOffline instead",
    "origin": "hager"
  },
  {
    "name": "RfidTagStandaloneTag",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "RFID Reader Disabled",
    "unit": "",
    "description": "Tag for sending in Start/StopTransaction in Free Access mode",
    "origin": "hager"
  },
  {
    "name": "IoTechaHeartbeatSyncTime",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "true",
    "unit": "",
    "description": "Enables synchronization of local time using timestamps from Central System in Bootnotification and Heatbeats",
    "origin": "hager"
  },
  {
    "name": "IoTechaDischargeScheduleEnabled",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "false",
    "unit": "",
    "description": "Internal",
    "origin": "hager"
  },
  {
    "name": "IoTechaOCPPFreeAccessTokenId",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "RFID Reader Disabled",
    "unit": "",
    "description": "Tag for sending in Start/StopTransaction in Free Access mode (duplicates RfidTagStandaloneTag)",
    "origin": "hager"
  },
  {
    "name": "IoTechaAuthorizationMode",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "OCPP Full",
    "unit": "",
    "description": "OCPP Full - tokens authorize using OCPP Authorize.req. Standalone Local - tokens authorize using internal DB. Standalone Free Access - charging starts without token presented. Do not use in along with RfidTagReaderEnabled and RfidTagAuthMode",
    "origin": "hager"
  },
  {
    "name": "EV41SuspendChargingEnabled",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "TRUE",
    "unit": "",
    "description": "",
    "origin": "hager"
  },
  {
    "name": "FreevendEnabled",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "false",
    "unit": "",
    "description": "In Free Vend mode authorization is disabled and charging could be started without authorization. When this mode is enabled, Authorize message will not be sent to Central System. StartTransaction message will be sent as usually at the beginning of charging sesssion.",
    "origin": "daze"
  },
  {
    "name": "FreevendIdTag",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "In Free Vend mode, use this key to set idTag. Max length is 20 like IdToken type. Central system should be configured to accept StartTransaction with idTag configured for Free Vend mode.",
    "origin": "daze"
  },
  {
    "name": "TimeOffset",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "00:00",
    "unit": "",
    "description": "This is used for display/local time purposes only. Configured current local time offset in the UTC time offset format. Let say for US, 5 hours ahead of UTC time. So, the value to set \"-05:00\". If this is not set/empty, it will show in UTC format",
    "origin": "daze"
  },
  {
    "name": "NextTimeOffsetTransitionDateTime",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "This is used for display/local time purposes only. On this date time, the clock displayed to the EV driver will be given the new offset as configured via 'TimeOffsetNextTransition'. For example, \"2022-03-28T02:00:00+01:00\". It is represented ac-cording to the ISO8601 standard.",
    "origin": "daze"
  },
  {
    "name": "TimeOffsetNextTransition",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "00:00",
    "unit": "",
    "description": "This is used for display/local time purposes only. New offset that will be set on the next time offset transition as con-figured via 'NextTimeOffsetTransitionDateTime'. For example, \"-04:00\"",
    "origin": "daze"
  },
  {
    "name": "Cst_BackendUrl",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Change the Central system URL, eg: wss://ocpp.sintio.app/ocpp16/{organizationId}/. After the changes, 'RebotRequired' response is triggered, and it will take effect after restarting. Cannot be modified while charging.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_ChargeBoxId",
    "required": false,
    "read": true,
    "write": false,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Change the Charge box ID, default as SN. After the changes, 'RebotRequired' response is triggered, and it will take effect after restarting.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_rssi_values",
    "required": false,
    "read": true,
    "write": false,
    "type": "integer",
    "defaultValue": "",
    "unit": "",
    "description": "The signal strength of the WiFi/Cellular based on the connectivity.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_NotNetworkMeterValueSampleInterval",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "0",
    "unit": "",
    "description": "Sampling interval for metervalue when the charger is offline.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_FreeVendActive",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "FALSE",
    "unit": "",
    "description": "Plug in to start charging and unplug to stop.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_FreeVendIdTag",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "A0000000",
    "unit": "",
    "description": "When the value is empty, it is represented as 'A0000000'.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_CaCert",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Certification",
    "origin": "nexblue"
  },
  {
    "name": "Cst_ReconnectInterva",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "10",
    "unit": "",
    "description": "The interval of reconnection",
    "origin": "nexblue"
  },
  {
    "name": "Cst_PreBootTransactions",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "FALSE",
    "unit": "",
    "description": "Whether or not a transaction can be initiated before the BootNotification successfully completes.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_SilentOfflineTransactions",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "FALSE",
    "unit": "",
    "description": "If the EVSE goes offline, whether or not it can continue to charge without sending StartTx / StopTx to the server when going online again.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_AuthorizationTimeout",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "20",
    "unit": "",
    "description": "How long the EVSE tries the Authorize request before it enters offline mode.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_MeterValueCacheSize",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "1",
    "unit": "",
    "description": "How many data can be cached in MeterValue.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_StopTxnDataCapturePeriodic",
    "required": false,
    "read": true,
    "write": true,
    "type": "boolean",
    "defaultValue": "FALSE",
    "unit": "",
    "description": "Whether or not to enable stop Txn Data timer logging.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_ModemMeterValueSampleInterval",
    "required": false,
    "read": true,
    "write": true,
    "type": "integer",
    "defaultValue": "0",
    "unit": "",
    "description": "Sampling interval for metervalue when the charger is connected to cloud via 4G. Default close.",
    "origin": "nexblue"
  },
  {
    "name": "Cst_ModemStateBoot",
    "required": false,
    "read": true,
    "write": true,
    "type": "string",
    "defaultValue": "",
    "unit": "",
    "description": "Whether or not the charger is connected to cloud via 4G.",
    "origin": "nexblue"
  }
]
